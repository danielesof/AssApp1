{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nutritionReducer = void 0;\nvar nutritionState = {\n  nutritionDone: 300,\n  nutritionGoal: 1200,\n  nutrition: [{\n    id: 0,\n    meal: 'Breakfast',\n    foods: [{\n      id: 0,\n      name: 'Eggs',\n      calories: 300,\n      quantity: '200 grams'\n    }, {\n      id: 1,\n      name: 'Milk',\n      calories: 100,\n      quantity: '200 liters'\n    }]\n  }, {\n    id: 1,\n    meal: 'Lunch',\n    foods: [{\n      id: 0,\n      name: 'Chicken',\n      calories: 150,\n      quantity: '200 grams'\n    }, {\n      id: 1,\n      name: 'Rice',\n      calories: 300,\n      quantity: '100 grams'\n    }]\n  }]\n};\n\nvar nutritionReducer = function nutritionReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : nutritionState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newState = JSON.parse(JSON.stringify(state));\n\n  switch (action.type) {\n    case 'ADD_MEAL':\n      {\n        newState.nutrition.push(action.meal);\n        break;\n      }\n\n    case 'REMOVE_MEAL':\n      {\n        for (var i = 0; i < newState.nutrition.length; i++) {\n          if (newState.nutrition[i].id == action.mealId) {\n            newState.nutrition.splice(i, 1);\n          }\n        }\n\n        break;\n      }\n\n    default:\n      return newState;\n  }\n\n  return newState;\n};\n\nexports.nutritionReducer = nutritionReducer;","map":{"version":3,"sources":["/home/maxmoffa/Scaricati/AssApp_1.0/AssorbimentoApp/src/redux/reducers/nutritionReducer.js"],"names":["nutritionState","nutritionDone","nutritionGoal","nutrition","id","meal","foods","name","calories","quantity","nutritionReducer","state","action","newState","JSON","parse","stringify","type","push","i","length","mealId","splice"],"mappings":";;;;AAAA,IAAMA,cAAc,GAAG;AACrBC,EAAAA,aAAa,EAAE,GADM;AAErBC,EAAAA,aAAa,EAAE,IAFM;AAGrBC,EAAAA,SAAS,EAAE,CACT;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,KAAK,EAAE,CACL;AACEF,MAAAA,EAAE,EAAE,CADN;AAEEG,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,QAAQ,EAAE,GAHZ;AAIEC,MAAAA,QAAQ,EAAE;AAJZ,KADK,EAOL;AACEL,MAAAA,EAAE,EAAE,CADN;AAEEG,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,QAAQ,EAAE,GAHZ;AAIEC,MAAAA,QAAQ,EAAE;AAJZ,KAPK;AAHT,GADS,EAmBT;AACEL,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,KAAK,EAAE,CACL;AACEF,MAAAA,EAAE,EAAE,CADN;AAEEG,MAAAA,IAAI,EAAE,SAFR;AAGEC,MAAAA,QAAQ,EAAE,GAHZ;AAIEC,MAAAA,QAAQ,EAAE;AAJZ,KADK,EAOL;AACEL,MAAAA,EAAE,EAAE,CADN;AAEEG,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,QAAQ,EAAE,GAHZ;AAIEC,MAAAA,QAAQ,EAAE;AAJZ,KAPK;AAHT,GAnBS;AAHU,CAAvB;;AA2CO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAoC;AAAA,MAAnCC,KAAmC,uEAA3BX,cAA2B;AAAA,MAAXY,MAAW;AAClE,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,KAAf,CAAX,CAAjB;;AACA,UAAQC,MAAM,CAACK,IAAf;AACE,SAAK,UAAL;AAAiB;AACfJ,QAAAA,QAAQ,CAACV,SAAT,CAAmBe,IAAnB,CAAwBN,MAAM,CAACP,IAA/B;AACA;AACD;;AACD,SAAK,aAAL;AAAoB;AAClB,aAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAAQ,CAACV,SAAT,CAAmBiB,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAClD,cAAIN,QAAQ,CAACV,SAAT,CAAmBgB,CAAnB,EAAsBf,EAAtB,IAA4BQ,MAAM,CAACS,MAAvC,EAA+C;AAC7CR,YAAAA,QAAQ,CAACV,SAAT,CAAmBmB,MAAnB,CAA0BH,CAA1B,EAA6B,CAA7B;AACD;AACF;;AACD;AACD;;AACD;AACE,aAAON,QAAP;AAdJ;;AAgBA,SAAOA,QAAP;AACD,CAnBM","sourcesContent":["const nutritionState = {\n  nutritionDone: 300,\n  nutritionGoal: 1200,\n  nutrition: [\n    {\n      id: 0,\n      meal: 'Breakfast',\n      foods: [\n        {\n          id: 0,\n          name: 'Eggs',\n          calories: 300,\n          quantity: '200 grams'\n        },\n        {\n          id: 1,\n          name: 'Milk',\n          calories: 100,\n          quantity: '200 liters'\n        }\n      ]\n    },\n    {\n      id: 1,\n      meal: 'Lunch',\n      foods: [\n        {\n          id: 0,\n          name: 'Chicken',\n          calories: 150,\n          quantity: '200 grams'\n        },\n        {\n          id: 1,\n          name: 'Rice',\n          calories: 300,\n          quantity: '100 grams'\n        }\n      ]\n    }\n  ]\n};\n\nexport const nutritionReducer = (state = nutritionState, action) => {\n  const newState = JSON.parse(JSON.stringify(state));\n  switch (action.type) {\n    case 'ADD_MEAL': {\n      newState.nutrition.push(action.meal);\n      break;\n    }\n    case 'REMOVE_MEAL': {\n      for (let i = 0; i < newState.nutrition.length; i++) {\n        if (newState.nutrition[i].id == action.mealId) {\n          newState.nutrition.splice(i, 1);\n        }\n      }\n      break;\n    }\n    default:\n      return newState;\n  }\n  return newState;\n};\n"]},"metadata":{},"sourceType":"script"}