{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _cubicSpline = _interopRequireDefault(require(\"cubic-spline\"));\n\nvar _deepmerge = _interopRequireDefault(require(\"deepmerge\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _memoizeOne = _interopRequireDefault(require(\"memoize-one\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _reactNativeSvg = _interopRequireWildcard(require(\"react-native-svg\"));\n\nvar _jsxFileName = \"/home/maxmoffa/Scaricati/AssApp_1.0/AssorbimentoApp/node_modules/react-native-responsive-linechart/src/LineChart.js\";\n\nvar LineChart = function (_Component) {\n  (0, _inherits2.default)(LineChart, _Component);\n\n  function LineChart(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, LineChart);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LineChart).call(this, props));\n\n    _this.handleTouchEvent = function (evt, gestureState) {\n      var xTouch = evt.nativeEvent.locationX - _this.gridOffset.x;\n\n      if (_this.state.dimensions && _this.points) {\n        idx = Math.round(xTouch / _this.gridSize.width * (_this.props.data.length - 1));\n\n        if (_this.state.tooltipIndex != idx) {\n          if (idx >= 0 && idx <= _this.props.data.length - 1) {\n            _this.setState({\n              tooltipIndex: idx\n            });\n          } else {\n            _this.setState({\n              tooltipIndex: undefined\n            });\n          }\n        }\n      }\n\n      return true;\n    };\n\n    _this.onLayout = function (event) {\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n          width = _event$nativeEvent$la.width,\n          height = _event$nativeEvent$la.height;\n\n      _this.setState({\n        dimensions: {\n          width: width,\n          height: height\n        }\n      });\n    };\n\n    _this.renderYAxisLabels = function (config) {\n      var yAxis = config.yAxis,\n          insetX = config.insetX;\n\n      if (yAxis.visible && _this.yLabels) {\n        return _this.yLabels.slice(1, _this.yLabels.length - 1).map(function (yLabel) {\n          return _react.default.createElement(_reactNativeSvg.Text, {\n            key: yLabel,\n            fill: yAxis.labelColor,\n            fontSize: yAxis.labelFontSize,\n            x: insetX + _this.yAxisWidth - 5,\n            y: _this.realY(yLabel),\n            textAnchor: \"end\",\n            height: yAxis.labelFontSize,\n            fontWeight: \"400\",\n            dy: yAxis.labelFontSize * 0.3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 191\n            }\n          }, yAxis.labelFormatter(yLabel));\n        });\n      }\n\n      return undefined;\n    };\n\n    _this.renderXAxisLabels = function (config) {\n      var xAxis = config.xAxis;\n      var xLabels = _this.props.xLabels;\n\n      if (xAxis.visible && xLabels) {\n        return _this.xLabelPoints.map(function (point, i) {\n          return _react.default.createElement(_reactNativeSvg.Text, {\n            key: point.x,\n            fill: xAxis.labelColor,\n            fontSize: xAxis.labelFontSize,\n            x: point.x,\n            y: point.y,\n            textAnchor: \"middle\",\n            height: xAxis.labelFontSize,\n            dy: xAxis.labelFontSize,\n            fontWeight: \"400\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 216\n            }\n          }, xLabels[i]);\n        });\n      }\n\n      return undefined;\n    };\n\n    _this.renderGrid = function (config) {\n      var grid = config.grid;\n\n      if (grid.visible) {\n        return _react.default.createElement(_react.default.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          }\n        }, _this.yLabels.map(function (yLabel) {\n          return _react.default.createElement(_reactNativeSvg.Line, {\n            key: yLabel,\n            x1: _this.gridOffset.x,\n            y1: _this.realY(yLabel),\n            x2: _this.gridOffset.x + _this.gridSize.width,\n            y2: _this.realY(yLabel),\n            stroke: grid.strokeColor,\n            strokeWidth: grid.strokeWidth,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 242\n            }\n          });\n        }), _react.default.createElement(_reactNativeSvg.Line, {\n          x1: _this.gridOffset.x,\n          y1: _this.highestLine,\n          x2: _this.gridOffset.x,\n          y2: _this.lowestLine,\n          stroke: grid.strokeColor,\n          strokeWidth: grid.strokeWidth,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252\n          }\n        }), _react.default.createElement(_reactNativeSvg.Line, {\n          x1: _this.gridOffset.x + _this.gridSize.width,\n          y1: _this.lowestLine,\n          x2: _this.gridOffset.x + _this.gridSize.width,\n          y2: _this.highestLine,\n          stroke: grid.strokeColor,\n          strokeWidth: grid.strokeWidth,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260\n          }\n        }));\n      }\n\n      return undefined;\n    };\n\n    _this.renderDataArea = function (config) {\n      var area = config.area;\n\n      if (area.visible) {\n        return _react.default.createElement(_react.default.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 279\n          }\n        }, _react.default.createElement(_reactNativeSvg.Defs, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280\n          }\n        }, _react.default.createElement(_reactNativeSvg.LinearGradient, {\n          id: \"grad\",\n          x1: \"0%\",\n          y1: \"0%\",\n          x2: \"0%\",\n          y2: \"100%\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281\n          }\n        }, _react.default.createElement(_reactNativeSvg.Stop, {\n          offset: \"0%\",\n          stopColor: area.gradientFrom,\n          stopOpacity: area.gradientFromOpacity,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282\n          }\n        }), _react.default.createElement(_reactNativeSvg.Stop, {\n          offset: \"100%\",\n          stopColor: area.gradientTo,\n          stopOpacity: area.gradientToOpacity,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 283\n          }\n        }))), _react.default.createElement(_reactNativeSvg.Polygon, {\n          x: _this.gridOffset.x,\n          points: _this.areaPoints,\n          fill: \"url(#grad)\",\n          strokeWidth: \"0\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286\n          }\n        }));\n      }\n\n      return undefined;\n    };\n\n    _this.renderDataLine = function (config) {\n      var line = config.line;\n\n      if (line.visible) {\n        return _react.default.createElement(_reactNativeSvg.Polyline, {\n          fill: \"none\",\n          strokeLinecap: \"round\",\n          points: _this.formattedPoints,\n          x: _this.gridOffset.x,\n          stroke: line.strokeColor,\n          strokeWidth: line.strokeWidth,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298\n          }\n        });\n      }\n\n      return undefined;\n    };\n\n    _this.renderDataPoints = function (config) {\n      var dataPoint = config.dataPoint;\n      var label = dataPoint.label;\n\n      if (dataPoint.visible && _this.points) {\n        return _this.points.map(function (point, index) {\n          return _react.default.createElement(_react.default.Fragment, {\n            key: point.x,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 318\n            }\n          }, _react.default.createElement(_reactNativeSvg.Circle, {\n            cx: point.x + _this.gridOffset.x,\n            cy: point.y,\n            r: dataPoint.radius,\n            fill: dataPoint.color,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 319\n            }\n          }), label.visible && _react.default.createElement(_reactNativeSvg.Text, {\n            fill: dataPoint.label.labelColor,\n            fontSize: label.labelFontSize,\n            x: point.x,\n            textAlignVertical: \"center\",\n            y: _this.gridOffset.y + point.y - dataPoint.label.marginBottom,\n            dx: _this.gridOffset.x,\n            textAnchor: \"middle\",\n            height: label.labelFontSize,\n            dy: label.labelFontSize * 0.3,\n            fontWeight: \"400\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 321\n            }\n          }, label.labelFormatter(_this.props.data[index])));\n        });\n      }\n\n      return undefined;\n    };\n\n    _this.renderTooltip = function (config) {\n      if (_this.state.tooltipIndex === undefined) {\n        return undefined;\n      }\n\n      var tooltip = config.tooltip;\n      var dataX = _this.points[_this.state.tooltipIndex].x;\n      var dataY = _this.points[_this.state.tooltipIndex].y;\n      var dataValue = _this.props.data[_this.state.tooltipIndex];\n      var label = tooltip.labelFormatter(dataValue, _this.state.tooltipIndex);\n      var textWidth = label.length * tooltip.labelFontSize * 0.66 + tooltip.boxPaddingX;\n      var textHeight = tooltip.labelFontSize * 1.5 + tooltip.boxPaddingY;\n      return _react.default.createElement(_react.default.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        }\n      }, _react.default.createElement(_reactNativeSvg.Line, {\n        x1: dataX + _this.gridOffset.x,\n        x2: dataX + _this.gridOffset.x,\n        y1: dataY,\n        y2: dataY - 20,\n        stroke: tooltip.lineColor,\n        strokeWidth: tooltip.lineWidth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        }\n      }), _react.default.createElement(_reactNativeSvg.Rect, {\n        x: _this.gridOffset.x + dataX - textWidth / 2,\n        y: _this.gridOffset.y + dataY - 20 - textHeight,\n        rx: tooltip.boxBorderRadius,\n        width: textWidth,\n        height: textHeight,\n        fill: tooltip.boxColor,\n        strokeWidth: tooltip.boxBorderWidth,\n        stroke: tooltip.boxBorderColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        }\n      }), _react.default.createElement(_reactNativeSvg.Text, {\n        fill: tooltip.labelColor,\n        fontSize: tooltip.labelFontSize,\n        x: dataX,\n        textAlignVertical: \"center\",\n        y: _this.gridOffset.y + dataY - 20 - textHeight / 2,\n        dx: _this.gridOffset.x,\n        textAnchor: \"middle\",\n        height: tooltip.labelFontSize,\n        dy: tooltip.labelFontSize * 0.3,\n        fontWeight: \"400\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        }\n      }, label));\n    };\n\n    _this.mergeConfigs = (0, _memoizeOne.default)(function (c1, c2) {\n      return (0, _deepmerge.default)(c1, c2);\n    });\n    _this.state = {\n      dimensions: undefined,\n      tooltipIndex: undefined\n    };\n    _this.recalculate = (0, _memoizeOne.default)(_this.recalculate);\n\n    if (_lodash.default.get(props.config, \"tooltip.visible\", false) && props.config.interpolation !== \"spline\") {\n      _this._panResponder = _reactNative.PanResponder.create({\n        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {\n          return true;\n        },\n        onPanResponderGrant: _this.handleTouchEvent,\n        onPanResponderMove: _this.handleTouchEvent,\n        onStartShouldSetPanResponder: _this.handleTouchEvent\n      });\n    }\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(LineChart, [{\n    key: \"recalculate\",\n    value: function recalculate(dimensions, data, config) {\n      var _this2 = this;\n\n      if (!dimensions) {\n        return;\n      }\n\n      var width = dimensions.width,\n          height = dimensions.height;\n      var mergedConfig = (0, _deepmerge.default)(defaultConfig, config);\n      var grid = mergedConfig.grid,\n          line = mergedConfig.line,\n          area = mergedConfig.area,\n          yAxis = mergedConfig.yAxis,\n          xAxis = mergedConfig.xAxis,\n          insetX = mergedConfig.insetX,\n          insetY = mergedConfig.insetY,\n          interpolation = mergedConfig.interpolation,\n          backgroundColor = mergedConfig.backgroundColor;\n      this.highestDataPoint = Math.max.apply(Math, (0, _toConsumableArray2.default)(data));\n      this.lowestDataPoint = Math.min.apply(Math, (0, _toConsumableArray2.default)(data));\n      this.dataRange = this.highestDataPoint - this.lowestDataPoint;\n\n      if (!config.grid || !config.grid.stepSize) {\n        if (this.dataRange === 0) {\n          grid.stepSize = 1.0;\n          this.lowestYLabel = this.lowestDataPoint - 2;\n          this.highestYLabel = this.highestDataPoint + 3;\n        } else {\n          grid.stepSize = this.dataRange / 6.0;\n          this.lowestYLabel = (Math.floor(this.lowestDataPoint / grid.stepSize) - 1) * grid.stepSize;\n          this.highestYLabel = (Math.ceil(this.highestDataPoint / grid.stepSize) + 1) * grid.stepSize;\n        }\n      } else {\n        this.lowestYLabel = (Math.floor(this.lowestDataPoint / grid.stepSize) - 1) * grid.stepSize;\n        this.highestYLabel = (Math.ceil(this.highestDataPoint / grid.stepSize) + 1) * grid.stepSize;\n      }\n\n      this.top = this.highestYLabel;\n      this.bottom = this.lowestYLabel;\n      this.range = this.top - this.bottom;\n      var labelAmount = Math.ceil(this.range / grid.stepSize);\n      this.yLabels = Array(labelAmount).fill().map(function (e, i) {\n        return _this2.lowestYLabel + grid.stepSize * i;\n      });\n\n      if (!yAxis.visible) {\n        this.yAxisWidth = 0;\n      } else if (yAxis.labelWidth) {\n        this.yAxisWidth = yAxis.labelWidth;\n      } else {\n        var lengths = this.yLabels.map(function (v) {\n          return yAxis.labelFormatter(v).length;\n        });\n        var maxLength = Math.max.apply(Math, (0, _toConsumableArray2.default)(lengths));\n        this.yAxisWidth = maxLength * yAxis.labelFontSize * 0.66;\n      }\n\n      this.gridOffset = {\n        x: insetX + this.yAxisWidth,\n        y: insetY\n      };\n      this.gridSize = {\n        width: width - insetX * 2 - this.yAxisWidth,\n        height: height - insetY * 2\n      };\n      this.highestLine = this.realY(this.yLabels[this.yLabels.length - 1]);\n      this.lowestLine = this.realY(this.yLabels[0]);\n      this.points = this.calculatePoints(interpolation);\n      this.formattedPoints = this.formatPoints(this.points);\n      this.areaPoints = this.formatPoints(this.calculateAreaPoints(interpolation));\n\n      if (xAxis.visible) {\n        this.xLabelPoints = data.map(function (y, x) {\n          return {\n            x: _this2.gridOffset.x + _this2.realX(x),\n            y: _this2.gridSize.height\n          };\n        });\n      }\n    }\n  }, {\n    key: \"scaleY\",\n    value: function scaleY(y) {\n      return 1 - (y - this.bottom) / this.range;\n    }\n  }, {\n    key: \"realX\",\n    value: function realX(x) {\n      return x * this.gridSize.width / (this.props.data.length - 1);\n    }\n  }, {\n    key: \"realY\",\n    value: function realY(y) {\n      return this.scaleY(y) * this.gridSize.height;\n    }\n  }, {\n    key: \"scaleXYPoints\",\n    value: function scaleXYPoints() {\n      var _this3 = this;\n\n      return this.props.data.map(function (y, x) {\n        return {\n          x: _this3.realX(x),\n          y: _this3.realY(y)\n        };\n      });\n    }\n  }, {\n    key: \"linearPoints\",\n    value: function linearPoints() {\n      var points = this.scaleXYPoints();\n      return points;\n    }\n  }, {\n    key: \"splinePoints\",\n    value: function splinePoints() {\n      var tuples = this.scaleXYPoints();\n      var xs = tuples.map(function (t) {\n        return t.x;\n      });\n      var ys = tuples.map(function (t) {\n        return t.y;\n      });\n      var lastXCoordinate = Math.max.apply(Math, (0, _toConsumableArray2.default)(xs));\n      var points = [];\n\n      for (var x = 0; x <= lastXCoordinate; x += 1) {\n        var y = (0, _cubicSpline.default)(x, xs, ys);\n        points.push({\n          x: x,\n          y: y\n        });\n      }\n\n      return points;\n    }\n  }, {\n    key: \"calculatePoints\",\n    value: function calculatePoints(interpolation) {\n      if (interpolation === \"spline\") {\n        return this.splinePoints();\n      } else {\n        return this.linearPoints();\n      }\n    }\n  }, {\n    key: \"formatPoints\",\n    value: function formatPoints(points) {\n      return points.map(function (p) {\n        return p.x + \",\" + p.y;\n      }).join(\" \");\n    }\n  }, {\n    key: \"calculateAreaPoints\",\n    value: function calculateAreaPoints(interpolation) {\n      var points = this.calculatePoints(interpolation);\n      points.push({\n        x: points[points.length - 1].x + 0.5,\n        y: points[points.length - 1].y\n      });\n      points.push({\n        x: this.gridSize.width,\n        y: this.lowestLine\n      });\n      points.push({\n        x: 0,\n        y: this.lowestLine\n      });\n      return points;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      if (this.state.dimensions) {\n        var dimensions = this.state.dimensions;\n        var width = dimensions.width,\n            height = dimensions.height;\n      }\n\n      this.recalculate(this.state.dimensions, this.props.data, this.props.config);\n      var _this$props = this.props,\n          style = _this$props.style,\n          xLabels = _this$props.xLabels;\n      var config = this.mergeConfigs(defaultConfig, this.props.config);\n      var grid = config.grid,\n          insetX = config.insetX,\n          insetY = config.insetY,\n          backgroundColor = config.backgroundColor,\n          backgroundOpacity = config.backgroundOpacity;\n      var gridSize = this.gridSize;\n      var gridOffset = this.gridOffset;\n      return _react.default.createElement(_reactNative.View, (0, _extends2.default)({\n        style: (0, _extends2.default)({}, viewStyle, this.props.style, {\n          backgroundColor: backgroundColor\n        }),\n        onLayout: this.onLayout\n      }, _lodash.default.get(this._panResponder, \"panHandlers\", {}), {\n        ref: function ref(view) {\n          _this4.myComponent = view;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        }\n      }), this.points ? _react.default.createElement(_reactNativeSvg.default, {\n        width: width,\n        height: height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426\n        }\n      }, _react.default.createElement(_reactNativeSvg.Rect, {\n        x: \"0\",\n        y: \"0\",\n        width: width,\n        height: height,\n        fill: backgroundColor,\n        fillOpacity: backgroundOpacity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428\n        }\n      }), _react.default.createElement(_reactNativeSvg.Rect, {\n        x: insetX,\n        y: insetY,\n        width: this.yAxisWidth,\n        height: gridSize.height,\n        fill: backgroundColor,\n        fillOpacity: backgroundOpacity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        }\n      }), _react.default.createElement(_reactNativeSvg.Rect, {\n        x: gridOffset.x,\n        y: gridOffset.y,\n        width: gridSize.width,\n        height: gridSize.height,\n        fill: grid.backgroundColor,\n        fillOpacity: backgroundOpacity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432\n        }\n      }), this.renderYAxisLabels(config), this.renderXAxisLabels(config), this.renderGrid(config), this.renderDataArea(config), this.renderDataLine(config), this.renderTooltip(config), this.renderDataPoints(config)) : undefined);\n    }\n  }]);\n  return LineChart;\n}(_react.Component);\n\nvar defaultConfig = {\n  grid: {\n    visible: true,\n    backgroundColor: \"#fff\",\n    strokeWidth: 1,\n    strokeColor: \"#ededed\",\n    stepSize: 15\n  },\n  line: {\n    visible: true,\n    strokeWidth: 1,\n    strokeColor: \"#333\"\n  },\n  area: {\n    visible: true,\n    gradientFrom: \"#be2ddd\",\n    gradientFromOpacity: 1,\n    gradientTo: \"#e056fd\",\n    gradientToOpacity: 0.4\n  },\n  yAxis: {\n    visible: true,\n    labelFontSize: 12,\n    labelColor: \"#777\",\n    labelFormatter: function labelFormatter(v) {\n      return String(v);\n    }\n  },\n  xAxis: {\n    visible: false,\n    labelFontSize: 12,\n    labelColor: \"#777\"\n  },\n  tooltip: {\n    visible: false,\n    labelFormatter: function labelFormatter(v) {\n      return v.toFixed(2);\n    },\n    lineColor: \"#777\",\n    lineWidth: 1,\n    circleColor: \"#fff\",\n    circleBorderColor: \"#fff\",\n    circleBorderWidth: 1,\n    boxColor: \"#fff\",\n    boxBorderWidth: 1,\n    boxBorderColor: \"#777\",\n    boxBorderRadius: 5,\n    boxPaddingY: 0,\n    boxPaddingX: 0,\n    labelColor: \"black\",\n    labelFontSize: 10\n  },\n  dataPoint: {\n    visible: false,\n    color: \"#777\",\n    radius: 5,\n    label: {\n      visible: false,\n      labelFontSize: 12,\n      labelColor: \"#777\",\n      labelFormatter: function labelFormatter(v) {\n        return String(v);\n      },\n      marginBottom: 25\n    }\n  },\n  insetY: 0,\n  insetX: 0,\n  interpolation: \"none\",\n  backgroundColor: \"#fff\",\n  backgroundOpacity: 1\n};\nvar viewStyle = {\n  alignSelf: \"stretch\"\n};\nLineChart.defaultProps = {\n  data: [-10, -15, 40, 19, 32, 15, 52, 55, 20, 60, 78, 42, 56],\n  style: {},\n  config: {}\n};\nvar _default = LineChart;\nexports.default = _default;","map":{"version":3,"sources":["/home/maxmoffa/Scaricati/AssApp_1.0/AssorbimentoApp/node_modules/react-native-responsive-linechart/src/LineChart.js"],"names":["LineChart","props","handleTouchEvent","evt","gestureState","xTouch","nativeEvent","locationX","gridOffset","x","state","dimensions","points","idx","Math","round","gridSize","width","data","length","tooltipIndex","setState","undefined","onLayout","event","layout","height","renderYAxisLabels","config","yAxis","insetX","visible","yLabels","slice","map","yLabel","labelColor","labelFontSize","yAxisWidth","realY","labelFormatter","renderXAxisLabels","xAxis","xLabels","xLabelPoints","point","i","y","renderGrid","grid","strokeColor","strokeWidth","highestLine","lowestLine","renderDataArea","area","gradientFrom","gradientFromOpacity","gradientTo","gradientToOpacity","areaPoints","renderDataLine","line","formattedPoints","renderDataPoints","dataPoint","label","index","radius","color","marginBottom","renderTooltip","tooltip","dataX","dataY","dataValue","textWidth","boxPaddingX","textHeight","boxPaddingY","lineColor","lineWidth","boxBorderRadius","boxColor","boxBorderWidth","boxBorderColor","mergeConfigs","c1","c2","recalculate","_","get","interpolation","_panResponder","PanResponder","create","onMoveShouldSetPanResponder","onPanResponderGrant","onPanResponderMove","onStartShouldSetPanResponder","mergedConfig","defaultConfig","insetY","backgroundColor","highestDataPoint","max","lowestDataPoint","min","dataRange","stepSize","lowestYLabel","highestYLabel","floor","ceil","top","bottom","range","labelAmount","Array","fill","e","labelWidth","lengths","v","maxLength","calculatePoints","formatPoints","calculateAreaPoints","realX","scaleY","scaleXYPoints","tuples","xs","t","ys","lastXCoordinate","push","splinePoints","linearPoints","p","join","style","backgroundOpacity","viewStyle","view","myComponent","Component","String","toFixed","circleColor","circleBorderColor","circleBorderWidth","alignSelf","defaultProps"],"mappings":"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","sourcesContent":["import spline from \"cubic-spline\";\nimport deepmerge from \"deepmerge\";\nimport React, { Component } from \"react\";\nimport { View, PanResponder } from \"react-native\";\nimport memoizeOne from \"memoize-one\";\nimport _ from \"lodash\";\nimport Svg, { Polyline, Rect, Text, Line, Polygon, LinearGradient, Defs, Stop, Circle } from \"react-native-svg\";\n\nclass LineChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { dimensions: undefined, tooltipIndex: undefined };\n\n    // Memoize data calculations for rendering\n    this.recalculate = memoizeOne(this.recalculate);\n\n    // For tooltips to work we need to get funky with the PanResponder.\n    // Capturing touch and move events to calculate tooltip index\n    if (_.get(props.config, \"tooltip.visible\", false) && props.config.interpolation !== \"spline\") {\n      this._panResponder = PanResponder.create({\n        onMoveShouldSetPanResponder: () => true,\n        onPanResponderGrant: this.handleTouchEvent,\n        onPanResponderMove: this.handleTouchEvent,\n        onStartShouldSetPanResponder: this.handleTouchEvent\n      });\n    }\n  }\n\n  handleTouchEvent = (evt, gestureState) => {\n    const xTouch = evt.nativeEvent.locationX - this.gridOffset.x;\n    if (this.state.dimensions && this.points) {\n      idx = Math.round((xTouch / this.gridSize.width) * (this.props.data.length - 1));\n      if (this.state.tooltipIndex != idx) {\n        if (idx >= 0 && idx <= this.props.data.length - 1) {\n          this.setState({ tooltipIndex: idx });\n        } else {\n          this.setState({ tooltipIndex: undefined });\n        }\n      }\n    }\n    return true;\n  };\n\n  recalculate(dimensions, data, config) {\n    if (!dimensions) {\n      return;\n    }\n\n    const { width, height } = dimensions;\n    const mergedConfig = deepmerge(defaultConfig, config);\n    const { grid, line, area, yAxis, xAxis, insetX, insetY, interpolation, backgroundColor } = mergedConfig;\n\n    this.highestDataPoint = Math.max(...data);\n    this.lowestDataPoint = Math.min(...data);\n    this.dataRange = this.highestDataPoint - this.lowestDataPoint;\n\n    if (!config.grid || !config.grid.stepSize) {\n      // default grid\n      if (this.dataRange === 0) {\n        //edge case for 1 value or multiple times the same value\n        grid.stepSize = 1.0;\n        this.lowestYLabel = this.lowestDataPoint - 2;\n        this.highestYLabel = this.highestDataPoint + 3;\n      } else {\n        grid.stepSize = this.dataRange / 6.0;\n        this.lowestYLabel = (Math.floor(this.lowestDataPoint / grid.stepSize) - 1) * grid.stepSize;\n        this.highestYLabel = (Math.ceil(this.highestDataPoint / grid.stepSize) + 1) * grid.stepSize;\n      }\n    } else {\n      // grid specified in config\n      this.lowestYLabel = (Math.floor(this.lowestDataPoint / grid.stepSize) - 1) * grid.stepSize;\n      this.highestYLabel = (Math.ceil(this.highestDataPoint / grid.stepSize) + 1) * grid.stepSize;\n    }\n\n    this.top = this.highestYLabel;\n    this.bottom = this.lowestYLabel;\n    this.range = this.top - this.bottom;\n\n    const labelAmount = Math.ceil(this.range / grid.stepSize);\n\n    this.yLabels = Array(labelAmount)\n      .fill()\n      .map((e, i) => this.lowestYLabel + grid.stepSize * i);\n\n    if (!yAxis.visible) {\n      this.yAxisWidth = 0;\n    } else if (yAxis.labelWidth) {\n      this.yAxisWidth = yAxis.labelWidth;\n    } else {\n      const lengths = this.yLabels.map(v => yAxis.labelFormatter(v).length);\n      const maxLength = Math.max(...lengths);\n      this.yAxisWidth = maxLength * yAxis.labelFontSize * 0.66;\n    }\n\n    this.gridOffset = {\n      x: insetX + this.yAxisWidth,\n      y: insetY\n    };\n\n    this.gridSize = {\n      width: width - insetX * 2 - this.yAxisWidth,\n      height: height - insetY * 2\n    };\n\n    this.highestLine = this.realY(this.yLabels[this.yLabels.length - 1]);\n    this.lowestLine = this.realY(this.yLabels[0]);\n\n    this.points = this.calculatePoints(interpolation);\n    this.formattedPoints = this.formatPoints(this.points);\n    this.areaPoints = this.formatPoints(this.calculateAreaPoints(interpolation));\n\n    if (xAxis.visible) {\n      this.xLabelPoints = data.map((y, x) => ({\n        x: this.gridOffset.x + this.realX(x),\n        y: this.gridSize.height\n      }));\n    }\n  }\n\n  scaleY(y) {\n    return 1 - (y - this.bottom) / this.range;\n  }\n\n  realX(x) {\n    return (x * this.gridSize.width) / (this.props.data.length - 1);\n  }\n\n  realY(y) {\n    return this.scaleY(y) * this.gridSize.height;\n  }\n\n  scaleXYPoints() {\n    return this.props.data.map((y, x) => ({\n      x: this.realX(x),\n      y: this.realY(y)\n    }));\n  }\n\n  linearPoints() {\n    const points = this.scaleXYPoints();\n    return points;\n  }\n\n  splinePoints() {\n    const tuples = this.scaleXYPoints();\n    const xs = tuples.map(t => t.x);\n    const ys = tuples.map(t => t.y);\n    const lastXCoordinate = Math.max(...xs);\n    const points = [];\n    for (let x = 0; x <= lastXCoordinate; x += 1) {\n      const y = spline(x, xs, ys);\n      points.push({ x, y });\n    }\n\n    return points;\n  }\n\n  calculatePoints(interpolation) {\n    if (interpolation === \"spline\") {\n      return this.splinePoints();\n    } else {\n      return this.linearPoints();\n    }\n  }\n\n  formatPoints(points) {\n    return points.map(p => p.x + \",\" + p.y).join(\" \");\n  }\n\n  calculateAreaPoints(interpolation) {\n    const points = this.calculatePoints(interpolation);\n    points.push({\n      x: points[points.length - 1].x + 0.5, // pixel fix\n      y: points[points.length - 1].y\n    });\n    points.push({ x: this.gridSize.width, y: this.lowestLine });\n    points.push({ x: 0, y: this.lowestLine });\n    return points;\n  }\n\n  onLayout = event => {\n    const { width, height } = event.nativeEvent.layout;\n    this.setState({ dimensions: { width, height } });\n  };\n\n  renderYAxisLabels = config => {\n    const { yAxis, insetX } = config;\n\n    if (yAxis.visible && this.yLabels) {\n      return this.yLabels.slice(1, this.yLabels.length - 1).map(yLabel => (\n        <Text\n          key={yLabel}\n          fill={yAxis.labelColor}\n          fontSize={yAxis.labelFontSize}\n          x={insetX + this.yAxisWidth - 5}\n          y={this.realY(yLabel)}\n          textAnchor=\"end\"\n          height={yAxis.labelFontSize}\n          fontWeight=\"400\"\n          dy={yAxis.labelFontSize * 0.3}\n        >\n          {yAxis.labelFormatter(yLabel)}\n        </Text>\n      ));\n    }\n\n    return undefined;\n  };\n\n  renderXAxisLabels = config => {\n    const { xAxis } = config;\n    const { xLabels } = this.props;\n\n    if (xAxis.visible && xLabels) {\n      return this.xLabelPoints.map((point, i) => (\n        <Text\n          key={point.x}\n          fill={xAxis.labelColor}\n          fontSize={xAxis.labelFontSize}\n          x={point.x}\n          y={point.y}\n          textAnchor=\"middle\"\n          height={xAxis.labelFontSize}\n          dy={xAxis.labelFontSize}\n          fontWeight=\"400\"\n        >\n          {xLabels[i]}\n        </Text>\n      ));\n    }\n\n    return undefined;\n  };\n\n  renderGrid = config => {\n    const { grid } = config;\n\n    if (grid.visible) {\n      return (\n        <React.Fragment>\n          {this.yLabels.map(yLabel => (\n            <Line\n              key={yLabel}\n              x1={this.gridOffset.x}\n              y1={this.realY(yLabel)}\n              x2={this.gridOffset.x + this.gridSize.width}\n              y2={this.realY(yLabel)}\n              stroke={grid.strokeColor}\n              strokeWidth={grid.strokeWidth}\n            />\n          ))}\n          <Line\n            x1={this.gridOffset.x}\n            y1={this.highestLine}\n            x2={this.gridOffset.x}\n            y2={this.lowestLine}\n            stroke={grid.strokeColor}\n            strokeWidth={grid.strokeWidth}\n          />\n          <Line\n            x1={this.gridOffset.x + this.gridSize.width}\n            y1={this.lowestLine}\n            x2={this.gridOffset.x + this.gridSize.width}\n            y2={this.highestLine}\n            stroke={grid.strokeColor}\n            strokeWidth={grid.strokeWidth}\n          />\n        </React.Fragment>\n      );\n    }\n\n    return undefined;\n  };\n\n  renderDataArea = config => {\n    const { area } = config;\n    if (area.visible) {\n      return (\n        <React.Fragment>\n          <Defs>\n            <LinearGradient id=\"grad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n              <Stop offset=\"0%\" stopColor={area.gradientFrom} stopOpacity={area.gradientFromOpacity} />\n              <Stop offset=\"100%\" stopColor={area.gradientTo} stopOpacity={area.gradientToOpacity} />\n            </LinearGradient>\n          </Defs>\n          <Polygon x={this.gridOffset.x} points={this.areaPoints} fill=\"url(#grad)\" strokeWidth=\"0\" />\n        </React.Fragment>\n      );\n    }\n\n    return undefined;\n  };\n\n  renderDataLine = config => {\n    const { line } = config;\n    if (line.visible) {\n      return (\n        <Polyline\n          fill=\"none\"\n          strokeLinecap=\"round\"\n          points={this.formattedPoints}\n          x={this.gridOffset.x}\n          stroke={line.strokeColor}\n          strokeWidth={line.strokeWidth}\n        />\n      );\n    }\n\n    return undefined;\n  };\n\n  renderDataPoints = config => {\n    const { dataPoint } = config;\n    const label = dataPoint.label;\n\n    if (dataPoint.visible && this.points) {\n      return this.points.map((point, index) => (\n        <React.Fragment key={point.x}>\n          <Circle cx={point.x + this.gridOffset.x} cy={point.y} r={dataPoint.radius} fill={dataPoint.color} />\n          {label.visible && (\n            <Text\n              fill={dataPoint.label.labelColor}\n              fontSize={label.labelFontSize}\n              x={point.x}\n              textAlignVertical=\"center\"\n              y={this.gridOffset.y + point.y - dataPoint.label.marginBottom}\n              dx={this.gridOffset.x}\n              textAnchor=\"middle\"\n              height={label.labelFontSize}\n              dy={label.labelFontSize * 0.3}\n              fontWeight=\"400\"\n            >\n              {label.labelFormatter(this.props.data[index])}\n            </Text>\n          )}\n        </React.Fragment>\n      ));\n    }\n    return undefined;\n  };\n\n  renderTooltip = config => {\n    if (this.state.tooltipIndex === undefined) {\n      return undefined;\n    }\n\n    const { tooltip } = config;\n\n    const dataX = this.points[this.state.tooltipIndex].x;\n    const dataY = this.points[this.state.tooltipIndex].y;\n\n    const dataValue = this.props.data[this.state.tooltipIndex];\n    const label = tooltip.labelFormatter(dataValue, this.state.tooltipIndex)\n\n    const textWidth = label.length * tooltip.labelFontSize * 0.66 + tooltip.boxPaddingX;\n    const textHeight = tooltip.labelFontSize * 1.5 + tooltip.boxPaddingY;\n\n    return (\n      <React.Fragment>\n        <Line\n          x1={dataX + this.gridOffset.x}\n          x2={dataX + this.gridOffset.x}\n          y1={dataY}\n          y2={dataY - 20}\n          stroke={tooltip.lineColor}\n          strokeWidth={tooltip.lineWidth}\n        />\n        <Rect\n          x={this.gridOffset.x + dataX - textWidth / 2}\n          y={this.gridOffset.y + dataY - 20 - textHeight}\n          rx={tooltip.boxBorderRadius}\n          width={textWidth}\n          height={textHeight}\n          fill={tooltip.boxColor}\n          strokeWidth={tooltip.boxBorderWidth}\n          stroke={tooltip.boxBorderColor}\n        />\n        <Text\n          fill={tooltip.labelColor}\n          fontSize={tooltip.labelFontSize}\n          x={dataX}\n          textAlignVertical=\"center\"\n          y={this.gridOffset.y + dataY - 20 - textHeight / 2}\n          dx={this.gridOffset.x}\n          textAnchor=\"middle\"\n          height={tooltip.labelFontSize}\n          dy={tooltip.labelFontSize * 0.3}\n          fontWeight=\"400\"\n        >\n          {label}\n        </Text>\n      </React.Fragment>\n    );\n  };\n\n  mergeConfigs = memoizeOne((c1, c2) => deepmerge(c1, c2));\n\n  render() {\n    if (this.state.dimensions) {\n      const { dimensions } = this.state;\n      var { width, height } = dimensions;\n    }\n\n    // Don't worry, this is memoized\n    this.recalculate(this.state.dimensions, this.props.data, this.props.config);\n\n    const { style, xLabels } = this.props;\n    // Merge default config with user provided config\n    const config = this.mergeConfigs(defaultConfig, this.props.config);\n    const { grid, insetX, insetY, backgroundColor, backgroundOpacity } = config;\n\n    // Ease of use\n    const gridSize = this.gridSize;\n    const gridOffset = this.gridOffset;\n\n    return (\n      <View\n        style={Object.assign({}, viewStyle, this.props.style, { backgroundColor })}\n        onLayout={this.onLayout}\n        {..._.get(this._panResponder, \"panHandlers\", {})}\n        ref={view => {\n          this.myComponent = view;\n        }}\n      >\n        {this.points ? (\n          <Svg width={width} height={height}>\n            {/* Draw background */}\n            <Rect x=\"0\" y=\"0\" width={width} height={height} fill={backgroundColor} fillOpacity={backgroundOpacity} />\n            {/* Draw Y axis label area | TODO: I think this is no longer needed */}\n            <Rect x={insetX} y={insetY} width={this.yAxisWidth} height={gridSize.height} fill={backgroundColor} fillOpacity={backgroundOpacity} />\n            {/* Draw background for actual chart area */}\n            <Rect\n              x={gridOffset.x}\n              y={gridOffset.y}\n              width={gridSize.width}\n              height={gridSize.height}\n              fill={grid.backgroundColor}\n              fillOpacity={backgroundOpacity}\n            />\n            {this.renderYAxisLabels(config)}\n            {this.renderXAxisLabels(config)}\n            {this.renderGrid(config)}\n            {this.renderDataArea(config)}\n            {this.renderDataLine(config)}\n            {this.renderTooltip(config)}\n            {this.renderDataPoints(config)}\n          </Svg>\n        ) : (\n          undefined\n        )}\n      </View>\n    );\n  }\n}\n\nconst defaultConfig = {\n  grid: {\n    visible: true,\n    backgroundColor: \"#fff\",\n    strokeWidth: 1,\n    strokeColor: \"#ededed\",\n    stepSize: 15\n  },\n  line: {\n    visible: true,\n    strokeWidth: 1,\n    strokeColor: \"#333\"\n  },\n  area: {\n    visible: true,\n    gradientFrom: \"#be2ddd\",\n    gradientFromOpacity: 1,\n    gradientTo: \"#e056fd\",\n    gradientToOpacity: 0.4\n  },\n  yAxis: {\n    visible: true,\n    labelFontSize: 12,\n    labelColor: \"#777\",\n    labelFormatter: v => String(v)\n  },\n  xAxis: {\n    visible: false,\n    labelFontSize: 12,\n    labelColor: \"#777\"\n  },\n  tooltip: {\n    visible: false,\n    labelFormatter: v => v.toFixed(2),\n    lineColor: \"#777\",\n    lineWidth: 1,\n    circleColor: \"#fff\",\n    circleBorderColor: \"#fff\",\n    circleBorderWidth: 1,\n    boxColor: \"#fff\",\n    boxBorderWidth: 1,\n    boxBorderColor: \"#777\",\n    boxBorderRadius: 5,\n    boxPaddingY: 0,\n    boxPaddingX: 0,\n    labelColor: \"black\",\n    labelFontSize: 10\n  },\n  dataPoint: {\n    visible: false,\n    color: \"#777\",\n    radius: 5,\n    label: {\n      visible: false,\n      labelFontSize: 12,\n      labelColor: \"#777\",\n      labelFormatter: v => String(v),\n      marginBottom: 25\n    }\n  },\n  insetY: 0,\n  insetX: 0,\n  interpolation: \"none\",\n  backgroundColor: \"#fff\",\n  backgroundOpacity: 1\n};\n\nconst viewStyle = {\n  alignSelf: \"stretch\"\n};\n\nLineChart.defaultProps = {\n  data: [-10, -15, 40, 19, 32, 15, 52, 55, 20, 60, 78, 42, 56],\n  style: {},\n  config: {}\n};\n\nexport default LineChart;\n"]},"metadata":{},"sourceType":"script"}