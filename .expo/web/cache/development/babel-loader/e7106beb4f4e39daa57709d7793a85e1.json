{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeSvg = require(\"react-native-svg\");\n\nvar _abstractChart = _interopRequireDefault(require(\"./abstract-chart\"));\n\nvar _jsxFileName = \"/home/maxmoffa/Scaricati/AssApp_1.0/AssorbimentoApp/node_modules/react-native-chart-kit/src/stackedbar-chart.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar barWidth = 32;\n\nvar StackedBarChart = function (_AbstractChart) {\n  (0, _inherits2.default)(StackedBarChart, _AbstractChart);\n\n  function StackedBarChart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, StackedBarChart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(StackedBarChart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderBars = function (config) {\n      var data = config.data,\n          width = config.width,\n          height = config.height,\n          paddingTop = config.paddingTop,\n          paddingRight = config.paddingRight,\n          border = config.border,\n          colors = config.colors;\n      return data.map(function (x, i) {\n        var barWidth = 32;\n        var ret = [];\n        var h = 0;\n        var st = paddingTop;\n\n        for (var z = 0; z < x.length; z++) {\n          h = (height - 55) * (x[z] / border);\n          var y = height / 4 * 3 - h + st;\n          var xC = (paddingRight + i * (width - paddingRight) / data.length + barWidth / 2) * 0.7;\n          ret.push(_react.default.createElement(_reactNativeSvg.Rect, {\n            key: Math.random(),\n            x: xC,\n            y: y,\n            width: barWidth,\n            height: h,\n            fill: colors[z],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33\n            }\n          }));\n          ret.push(_react.default.createElement(_reactNativeSvg.Text, (0, _extends2.default)({\n            key: Math.random(),\n            x: xC + 7 + barWidth / 2,\n            textAnchor: \"end\",\n            y: h > 15 ? y + 15 : y + 7\n          }, _this.getPropsForLabels(), {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43\n            }\n          }), x[z]));\n          st -= h;\n        }\n\n        return ret;\n      });\n    };\n\n    _this.renderLegend = function (config) {\n      var legend = config.legend,\n          colors = config.colors,\n          width = config.width,\n          height = config.height;\n      return legend.map(function (x, i) {\n        return _react.default.createElement(_reactNativeSvg.G, {\n          key: Math.random(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          }\n        }, _react.default.createElement(_reactNativeSvg.Rect, {\n          width: \"16px\",\n          height: \"16px\",\n          fill: colors[i],\n          rx: 8,\n          ry: 8,\n          x: width * 0.71,\n          y: height * 0.7 - i * 50,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          }\n        }), _react.default.createElement(_reactNativeSvg.Text, (0, _extends2.default)({\n          x: width * 0.78,\n          y: height * 0.76 - i * 50\n        }, _this.getPropsForLabels(), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          }\n        }), x));\n      });\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(StackedBarChart, [{\n    key: \"render\",\n    value: function render() {\n      var paddingTop = 15;\n      var paddingRight = 50;\n      var _this$props = this.props,\n          width = _this$props.width,\n          height = _this$props.height,\n          _this$props$style = _this$props.style,\n          style = _this$props$style === void 0 ? {} : _this$props$style,\n          data = _this$props.data,\n          _this$props$withHoriz = _this$props.withHorizontalLabels,\n          withHorizontalLabels = _this$props$withHoriz === void 0 ? true : _this$props$withHoriz,\n          _this$props$withVerti = _this$props.withVerticalLabels,\n          withVerticalLabels = _this$props$withVerti === void 0 ? true : _this$props$withVerti;\n      var _style$borderRadius = style.borderRadius,\n          borderRadius = _style$borderRadius === void 0 ? 0 : _style$borderRadius;\n      var config = {\n        width: width,\n        height: height\n      };\n      var border = 0;\n\n      for (var i = 0; i < data.data.length; i++) {\n        var actual = data.data[i].reduce(function (pv, cv) {\n          return pv + cv;\n        }, 0);\n\n        if (actual > border) {\n          border = actual;\n        }\n      }\n\n      return _react.default.createElement(_reactNative.View, {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        }\n      }, _react.default.createElement(_reactNativeSvg.Svg, {\n        height: height,\n        width: width,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        }\n      }, this.renderDefs(_objectSpread({}, config, {}, this.props.chartConfig)), _react.default.createElement(_reactNativeSvg.Rect, {\n        width: \"100%\",\n        height: height,\n        rx: borderRadius,\n        ry: borderRadius,\n        fill: \"url(#backgroundGradient)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        }\n      }), _react.default.createElement(_reactNativeSvg.G, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        }\n      }, this.renderHorizontalLines(_objectSpread({}, config, {\n        count: 4,\n        paddingTop: paddingTop\n      }))), _react.default.createElement(_reactNativeSvg.G, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        }\n      }, withHorizontalLabels ? this.renderHorizontalLabels(_objectSpread({}, config, {\n        count: 4,\n        data: [0, border],\n        paddingTop: paddingTop,\n        paddingRight: paddingRight\n      })) : null), _react.default.createElement(_reactNativeSvg.G, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        }\n      }, withVerticalLabels ? this.renderVerticalLabels(_objectSpread({}, config, {\n        labels: data.labels,\n        paddingRight: paddingRight + 28,\n        stackedBar: true,\n        paddingTop: paddingTop,\n        horizontalOffset: barWidth\n      })) : null), _react.default.createElement(_reactNativeSvg.G, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        }\n      }, this.renderBars(_objectSpread({}, config, {\n        data: data.data,\n        border: border,\n        colors: this.props.data.barColors,\n        paddingTop: paddingTop,\n        paddingRight: paddingRight + 20\n      }))), this.renderLegend(_objectSpread({}, config, {\n        legend: data.legend,\n        colors: this.props.data.barColors\n      }))));\n    }\n  }]);\n  return StackedBarChart;\n}(_abstractChart.default);\n\nvar _default = StackedBarChart;\nexports.default = _default;","map":{"version":3,"sources":["/home/maxmoffa/Scaricati/AssApp_1.0/AssorbimentoApp/node_modules/react-native-chart-kit/src/stackedbar-chart.js"],"names":["barWidth","StackedBarChart","renderBars","config","data","width","height","paddingTop","paddingRight","border","colors","map","x","i","ret","h","st","z","length","y","xC","push","Math","random","getPropsForLabels","renderLegend","legend","props","style","withHorizontalLabels","withVerticalLabels","borderRadius","actual","reduce","pv","cv","renderDefs","chartConfig","renderHorizontalLines","count","renderHorizontalLabels","renderVerticalLabels","labels","stackedBar","horizontalOffset","barColors","AbstractChart"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { View } from \"react-native\";\nimport { Svg, Rect, G, Text } from \"react-native-svg\";\nimport AbstractChart from \"./abstract-chart\";\n\nconst barWidth = 32;\n\nclass StackedBarChart extends AbstractChart {\n  renderBars = config => {\n    const {\n      data,\n      width,\n      height,\n      paddingTop,\n      paddingRight,\n      border,\n      colors\n    } = config;\n    return data.map((x, i) => {\n      const barWidth = 32;\n      const ret = [];\n      let h = 0;\n      let st = paddingTop;\n      for (let z = 0; z < x.length; z++) {\n        h = (height - 55) * (x[z] / border);\n        const y = (height / 4) * 3 - h + st;\n        const xC =\n          (paddingRight +\n            (i * (width - paddingRight)) / data.length +\n            barWidth / 2) *\n          0.7;\n        ret.push(\n          <Rect\n            key={Math.random()}\n            x={xC}\n            y={y}\n            width={barWidth}\n            height={h}\n            fill={colors[z]}\n          />\n        );\n        ret.push(\n          <Text\n            key={Math.random()}\n            x={xC + 7 + barWidth / 2}\n            textAnchor=\"end\"\n            y={h > 15 ? y + 15 : y + 7}\n            {...this.getPropsForLabels()}\n          >\n            {x[z]}\n          </Text>\n        );\n\n        st -= h;\n      }\n\n      return ret;\n    });\n  };\n\n  renderLegend = config => {\n    const { legend, colors, width, height } = config;\n    return legend.map((x, i) => {\n      return (\n        <G key={Math.random()}>\n          <Rect\n            width=\"16px\"\n            height=\"16px\"\n            fill={colors[i]}\n            rx={8}\n            ry={8}\n            x={width * 0.71}\n            y={height * 0.7 - i * 50}\n          />\n          <Text\n            x={width * 0.78}\n            y={height * 0.76 - i * 50}\n            {...this.getPropsForLabels()}\n          >\n            {x}\n          </Text>\n        </G>\n      );\n    });\n  };\n\n  render() {\n    const paddingTop = 15;\n    const paddingRight = 50;\n    const {\n      width,\n      height,\n      style = {},\n      data,\n      withHorizontalLabels = true,\n      withVerticalLabels = true\n    } = this.props;\n    const { borderRadius = 0 } = style;\n    const config = {\n      width,\n      height\n    };\n    let border = 0;\n    for (let i = 0; i < data.data.length; i++) {\n      const actual = data.data[i].reduce((pv, cv) => pv + cv, 0);\n      if (actual > border) {\n        border = actual;\n      }\n    }\n\n    return (\n      <View style={style}>\n        <Svg height={height} width={width}>\n          {this.renderDefs({\n            ...config,\n            ...this.props.chartConfig\n          })}\n          <Rect\n            width=\"100%\"\n            height={height}\n            rx={borderRadius}\n            ry={borderRadius}\n            fill=\"url(#backgroundGradient)\"\n          />\n          <G>\n            {this.renderHorizontalLines({\n              ...config,\n              count: 4,\n              paddingTop\n            })}\n          </G>\n          <G>\n            {withHorizontalLabels\n              ? this.renderHorizontalLabels({\n                  ...config,\n                  count: 4,\n                  data: [0, border],\n                  paddingTop,\n                  paddingRight\n                })\n              : null}\n          </G>\n          <G>\n            {withVerticalLabels\n              ? this.renderVerticalLabels({\n                  ...config,\n                  labels: data.labels,\n                  paddingRight: paddingRight + 28,\n                  stackedBar: true,\n                  paddingTop,\n                  horizontalOffset: barWidth\n                })\n              : null}\n          </G>\n          <G>\n            {this.renderBars({\n              ...config,\n              data: data.data,\n              border,\n              colors: this.props.data.barColors,\n              paddingTop,\n              paddingRight: paddingRight + 20\n            })}\n          </G>\n          {this.renderLegend({\n            ...config,\n            legend: data.legend,\n            colors: this.props.data.barColors\n          })}\n        </Svg>\n      </View>\n    );\n  }\n}\nexport default StackedBarChart;\n"]},"metadata":{},"sourceType":"script"}