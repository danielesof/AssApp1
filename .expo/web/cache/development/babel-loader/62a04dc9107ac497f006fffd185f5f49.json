{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeGestureHandler = require(\"react-native-gesture-handler\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _LogoHeader = _interopRequireDefault(require(\"../../components/LogoHeader/LogoHeader\"));\n\nvar _ContinueButton = _interopRequireDefault(require(\"../../components/ContinueButton/ContinueButton\"));\n\nvar _styles = _interopRequireDefault(require(\"./styles\"));\n\nvar _jsxFileName = \"/home/maxmoffa/Scaricati/AssApp_1.0/AssorbimentoApp/src/screens/Password/PasswordScreen.js\";\n\nvar PasswordScreen = function (_React$Component) {\n  (0, _inherits2.default)(PasswordScreen, _React$Component);\n\n  function PasswordScreen(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, PasswordScreen);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(PasswordScreen).call(this, props));\n\n    _this.onPressButton = function () {\n      _this.props.navigation.navigate('FingerPrint');\n\n      _this.props.addUserPassword(_this.state.password);\n    };\n\n    _this.state = {\n      password: ''\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(PasswordScreen, [{\n    key: \"checkCharacters\",\n    value: function checkCharacters() {\n      if (this.state.password.length < 8) return 1;\n      return 0;\n    }\n  }, {\n    key: \"checkUpperCase\",\n    value: function checkUpperCase() {\n      if (this.state.password.toUpperCase() == this.state.password) return 1;\n      return 0;\n    }\n  }, {\n    key: \"checkNumber\",\n    value: function checkNumber() {\n      return !/\\d/.test(this.state.password);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {\n        onPress: function onPress() {\n          return _reactNative.Keyboard.dismiss();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        }\n      }, _react.default.createElement(_reactNativeGestureHandler.ScrollView, {\n        style: _styles.default.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        }\n      }, _react.default.createElement(_LogoHeader.default, {\n        onPress: function onPress() {\n          _this2.props.navigation.goBack();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        }\n      }), _react.default.createElement(_reactNative.Text, {\n        style: _styles.default.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        }\n      }, \"Now let's set up your password\"), _react.default.createElement(_reactNative.View, {\n        style: _styles.default.conditionContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.inputContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        }\n      }, _react.default.createElement(_reactNative.TextInput, {\n        secureTextEntry: true,\n        style: _styles.default.input,\n        placeholder: \"Enter your password\",\n        onChangeText: function onChangeText(text) {\n          return _this2.setState({\n            password: text\n          });\n        },\n        value: this.state.password,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        }\n      })), _react.default.createElement(_reactNative.View, {\n        style: _styles.default.rowContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: this.checkCharacters() ? _styles.default.emptyBox : _styles.default.fullBox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        }\n      }), _react.default.createElement(_reactNative.Text, {\n        style: _styles.default.conditionText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        }\n      }, \"8+ characters\")), _react.default.createElement(_reactNative.View, {\n        style: _styles.default.rowContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: this.checkUpperCase() ? _styles.default.emptyBox : _styles.default.fullBox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        }\n      }), _react.default.createElement(_reactNative.Text, {\n        style: _styles.default.conditionText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        }\n      }, \"At least 1 uppercase\")), _react.default.createElement(_reactNative.View, {\n        style: _styles.default.rowContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: this.checkNumber() ? _styles.default.emptyBox : _styles.default.fullBox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        }\n      }), _react.default.createElement(_reactNative.Text, {\n        style: _styles.default.conditionText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        }\n      }, \"At least 1 number\"))), _react.default.createElement(_ContinueButton.default, {\n        onPress: function onPress() {\n          _this2.onPressButton();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        }\n      })));\n    }\n  }]);\n  return PasswordScreen;\n}(_react.default.Component);\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addUserPassword: function addUserPassword(password) {\n      return dispatch({\n        type: 'ADD_USERPASSWORD',\n        password: password\n      });\n    }\n  };\n}\n\nvar _default = (0, _reactRedux.connect)(null, mapDispatchToProps)(PasswordScreen);\n\nexports.default = _default;","map":{"version":3,"sources":["/home/maxmoffa/Scaricati/AssApp_1.0/AssorbimentoApp/src/screens/Password/PasswordScreen.js"],"names":["PasswordScreen","props","onPressButton","navigation","navigate","addUserPassword","state","password","length","toUpperCase","test","Keyboard","dismiss","styles","container","goBack","title","conditionContainer","inputContainer","input","text","setState","rowContainer","checkCharacters","emptyBox","fullBox","conditionText","checkUpperCase","checkNumber","React","Component","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Text, View, TextInput, TouchableWithoutFeedback, Keyboard } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { connect } from 'react-redux';\nimport LogoHeader from '../../components/LogoHeader/LogoHeader';\nimport ContinueButton from '../../components/ContinueButton/ContinueButton';\nimport styles from './styles';\n\nclass PasswordScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      password: ''\n    };\n  }\n\n  checkCharacters() {\n    if (this.state.password.length < 8) return 1;\n    return 0;\n  }\n\n  checkUpperCase() {\n    if (this.state.password.toUpperCase() == this.state.password) return 1;\n    return 0;\n  }\n\n  checkNumber() {\n    return !/\\d/.test(this.state.password);\n  }\n\n  onPressButton = () => {\n    this.props.navigation.navigate('FingerPrint');\n    this.props.addUserPassword(this.state.password);\n  };\n\n  render() {\n    return (\n      <TouchableWithoutFeedback onPress={() => Keyboard.dismiss()}>\n        <ScrollView style={styles.container}>\n          <LogoHeader\n            onPress={() => {\n              this.props.navigation.goBack();\n            }}\n          />\n          <Text style={styles.title}>Now let's set up your password</Text>\n          <View style={styles.conditionContainer}>\n            <View style={styles.inputContainer}>\n              <TextInput\n                secureTextEntry\n                style={styles.input}\n                placeholder=\"Enter your password\"\n                onChangeText={text => this.setState({ password: text })}\n                value={this.state.password}\n              />\n            </View>\n\n            <View style={styles.rowContainer}>\n              <View style={this.checkCharacters() ? styles.emptyBox : styles.fullBox} />\n              <Text style={styles.conditionText}>8+ characters</Text>\n            </View>\n            <View style={styles.rowContainer}>\n              <View style={this.checkUpperCase() ? styles.emptyBox : styles.fullBox} />\n              <Text style={styles.conditionText}>At least 1 uppercase</Text>\n            </View>\n            <View style={styles.rowContainer}>\n              <View style={this.checkNumber() ? styles.emptyBox : styles.fullBox} />\n              <Text style={styles.conditionText}>At least 1 number</Text>\n            </View>\n          </View>\n          <ContinueButton\n            onPress={() => {\n              this.onPressButton();\n            }}\n          />\n        </ScrollView>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addUserPassword: password => dispatch({ type: 'ADD_USERPASSWORD', password })\n  };\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(PasswordScreen);\n"]},"metadata":{},"sourceType":"script"}